type ActivateAccountMutationError {
  code: [String]
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input ActivateAccountMutationInput {
  code: String!
  clientMutationId: String
}

type ActivateAccountMutationPayload {
  ok: Boolean!
  user: UserType
  clientMutationId: String
  errors: ActivateAccountMutationError
}

type AddAddressMutationError {
  address: [String]
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input AddAddressMutationInput {
  address: String!
  clientMutationId: String
}

type AddAddressMutationPayload {
  ok: Boolean!
  user: UserType
  clientMutationId: String
  errors: AddAddressMutationError
}

type AddBalanceMutationError {
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input AddBalanceMutationInput {
  clientMutationId: String
}

type AddBalanceMutationPayload {
  ok: Boolean!
  user: UserType
  clientMutationId: String
  errors: AddBalanceMutationError
}

type AddCommentMutationError {
  text: [String]
  product: [String]
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input AddCommentMutationInput {
  text: String!
  product: ID!
  clientMutationId: String
}

type AddCommentMutationPayload {
  ok: Boolean!
  comment: CommentType
  clientMutationId: String
  errors: AddCommentMutationError
}

type BuyProductMutationError {
  productId: [String]
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input BuyProductMutationInput {
  productId: String!
  clientMutationId: String
}

type BuyProductMutationPayload {
  ok: Boolean!
  user: UserType
  product: ProductType
  clientMutationId: String
  errors: BuyProductMutationError
}

enum CategoryType {
  DIGITAL_GOODS
  PERSONAL_APPLIANCE
  VEHICLES
  APPAREL
  HOME_AND_KITCHEN
  BOOK_AND_MEDIA
  SPORT_ENTERTAINMENT
}

type CommentType implements Node {
  
  id: ID!
  product: ProductType!
  author: UserType!
  text: String!
}

type EditProfileMutationError {
  firstName: [String]
  lastName: [String]
  password: [String]
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input EditProfileMutationInput {
  firstName: String
  lastName: String
  password: String
  clientMutationId: String
}

type EditProfileMutationPayload {
  ok: Boolean!
  user: UserType
  clientMutationId: String
  errors: EditProfileMutationError
}

type MessageType implements Node {
  
  id: ID!
  sender: UserType!
  receiver: UserType!
  text: String!
}

type Mutation {
  productCreate(input: ProductCreateInput!): ProductCreatePayload
  productRemove(input: ProductRemoveMutationInput!): ProductRemoveMutationPayload
  addComment(input: AddCommentMutationInput!): AddCommentMutationPayload
  userLogin(input: UserLoginInput!): UserLoginPayload
  userLogout(input: UserLogoutInput!): UserLogoutPayload
  userSignUp(input: UserSignUpInput!): UserSignUpPayload
  editProfile(input: EditProfileMutationInput!): EditProfileMutationPayload
  resendCode(input: ResendCodeMutationInput!): ResendCodeMutationPayload
  resendPassword(input: ResendPasswordMutationInput!): ResendPasswordMutationPayload
  activateAccount(input: ActivateAccountMutationInput!): ActivateAccountMutationPayload
  addBalance(input: AddBalanceMutationInput!): AddBalanceMutationPayload
  buyProduct(input: BuyProductMutationInput!): BuyProductMutationPayload
  addAddress(input: AddAddressMutationInput!): AddAddressMutationPayload
  sendMessage(input: SendMessageMutationInput!): SendMessageMutationPayload
}


interface Node {
  
  id: ID!
}

type PageInfo {
  
  hasNextPage: Boolean!

  
  hasPreviousPage: Boolean!

  
  startCursor: String

  
  endCursor: String
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
}

type ProductCreateError {
  title: [String]
  address: [String]
  description: [String]
  prodYear: [String]
  price: [String]
  category: [String]
  subCategory: [String]
  image: [String]
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input ProductCreateInput {
  title: String!
  address: String!
  description: String!
  prodYear: Int
  price: Int
  category: CategoryType!
  subCategory: SubCategoryType!
  image: String
  clientMutationId: String
}

type ProductCreatePayload {
  ok: Boolean!
  product: ProductType
  clientMutationId: String
  errors: ProductCreateError
}

type ProductEdge {
  
  node: ProductType

  
  cursor: String!
}

type ProductRemoveMutationError {
  product: [String]
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input ProductRemoveMutationInput {
  product: ID!
  clientMutationId: String
}

type ProductRemoveMutationPayload {
  ok: Boolean!
  clientMutationId: String
  errors: ProductRemoveMutationError
}

input ProductsQueryArguments {
  categoryIn: [CategoryType]
  subCategoryIn: [SubCategoryType]
  seller: ID
  buyer: ID
  prodYearLte: Int
  prodYearGte: Int
  prodYear: Int
  priceLte: Int
  priceGte: Int
  price: Int
  title: String
  titleContains: String
  description: String
  descriptionContains: String
}

type ProductType implements Node {
  
  id: ID!
  price: Int!
  title: String!
  address: String!
  description: String
  prodYear: Int!
  category: CategoryType!
  subCategory: SubCategoryType!
  image: String
  seller: UserType!
  buyer: UserType
  comments: [CommentType]
}

type Query {
  products(filters: ProductsQueryArguments, before: String, after: String, first: Int, last: Int): ProductConnection
  product(id: String!): ProductType
  users: [UserType]
  user(id: String!): UserType
  me: UserType
  hi: String
}

type ResendCodeMutationError {
  phone: [String]
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input ResendCodeMutationInput {
  phone: String!
  clientMutationId: String
}

type ResendCodeMutationPayload {
  ok: Boolean!
  clientMutationId: String
  errors: ResendCodeMutationError
}

type ResendPasswordMutationError {
  phone: [String]
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input ResendPasswordMutationInput {
  phone: String!
  clientMutationId: String
}

type ResendPasswordMutationPayload {
  ok: Boolean!
  clientMutationId: String
  errors: ResendPasswordMutationError
}

type SendMessageMutationError {
  text: [String]
  receiver: [String]
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input SendMessageMutationInput {
  text: String!
  receiver: ID!
  clientMutationId: String
}

type SendMessageMutationPayload {
  ok: Boolean!
  message: MessageType
  clientMutationId: String
  errors: SendMessageMutationError
}

enum SubCategoryType {
  MOBILE_PHONE
  MOBILE_ACCESSORIES
  CAMERA
  CAMERA_ACCESSORIES
  LAPTOP
  LAPTOP_ACCESSORIES
  COMPUTER_PARTS
  OFFICE_MACHINES
  TABLET
  BEAUTY
  HAIR_CLIPPER
  ELECTRICAL_PERSONAL_CARE
  SUNGLASSES
  PERFUME_ALL
  JEWELERY
  HEALTH_CARE
  CARS
  CAR_ACCESSORY_PARTS
  CONSUMABLE_PARTS
  MOTORBIKE
  POWER_TOOLS
  MEN_APPAREL
  WOMEN_APPAREL
  WATCH_CLOCK
  SPORTS_WEAR
  KIS_APPAREL
  PERSONAL_APPLIANCE_ACCESSORY
  SPORT_SHOES
  VIDEO_AUDIO
  HOME_APPLIANCE
  SERVING
  LIGHTING
  DECORATIVE
  PUBLICATION
  TRAINING_PACK
  SOFTWARE
  STATIONERY
  MUSICAL_INSTRUMENTS
  HANDICRAFT
  SPORT
  SPORT_WEAR
  BICYCLE
  BICYCLE_ACCESSORIES
  HIKING_AND_CAMPING
  TRAVELING_EQUIPMENT
}

type UserLoginError {
  phone: [String]
  password: [String]
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input UserLoginInput {
  phone: String!
  password: String!
  clientMutationId: String
}

type UserLoginPayload {
  ok: Boolean!
  user: UserType
  clientMutationId: String
  errors: UserLoginError
}

type UserLogoutError {
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input UserLogoutInput {
  clientMutationId: String
}

type UserLogoutPayload {
  ok: Boolean!
  clientMutationId: String
  errors: UserLogoutError
}

type UserSignUpError {
  firstName: [String]
  lastName: [String]
  phone: [String]
  password: [String]
  clientMutationId: [String]
  nonFieldErrors: [String]
}

input UserSignUpInput {
  firstName: String!
  lastName: String!
  phone: String!
  password: String!
  clientMutationId: String
}

type UserSignUpPayload {
  ok: Boolean!
  user: UserType
  clientMutationId: String
  errors: UserSignUpError
}

type UserType implements Node {
  
  id: ID!
  firstName: String!
  lastName: String!
  balance: Int!
  phone: String
  password: String!
  activated: Boolean!
  addresses: [String]
  boughtProducts: [ProductType]
  sellingProducts: [ProductType]
}

